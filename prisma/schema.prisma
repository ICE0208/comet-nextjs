// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  email        String   @unique
  hashPassword String
  createdAt    DateTime @default(now())

  following  Follow[]        @relation("FollowingRelation")
  followers  Follow[]        @relation("FollowerRelation")
  novels     Novel[]
  ratings    EpisodeRating[]
  novelLikes NovelLike[]
  workspaces Workspace[]
}

model Follow {
  followingId Int
  followerId  Int
  createdAt   DateTime @default(now())

  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)
  follower  User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)

  @@id(name: "relationshipId", [followerId, followingId]) // 복합키
}

model Novel {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  imageUrl    String
  authorId    Int
  createdAt   DateTime @default(now())
  isPublished Boolean  @default(false)

  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  episodes  Episode[]
  novelLike NovelLike[]
}

model NovelLike {
  userId    Int
  novelId   String   @db.Uuid
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@id([userId, novelId])
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  content     String
  imageUrl    String
  uploadDate  DateTime @default(now())
  view        Int      @default(0)
  isPublished Boolean  @default(false)

  novelId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  novel   Novel           @relation(fields: [novelId], references: [id], onDelete: Cascade)
  ratings EpisodeRating[]
}

model EpisodeRating {
  userId    Int
  episodeId Int
  score     Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@id([userId, episodeId])
}

model Workspace {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastUsedAt DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  history WorkspaceHistory[]
}

enum MessageStatus {
  PENDING
  COMPLETED
  ERROR
  CANCELLED
}

model WorkspaceHistory {
  id          String        @id @default(uuid()) @db.Uuid
  workspaceId String        @db.Uuid
  userRequest String        @db.Text
  status      MessageStatus @default(COMPLETED)
  createdAt   DateTime      @default(now())
  aiResponse  AIResponse?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model AIResponse {
  id                 Int                @id @default(autoincrement())
  text               String             @db.Text
  createdAt          DateTime           @default(now())
  workspaceHistoryId String             @unique @db.Uuid
  details            AIResponseDetail[]

  workspaceHistory WorkspaceHistory @relation(fields: [workspaceHistoryId], references: [id], onDelete: Cascade)
}

model AIResponseDetail {
  id           Int      @id @default(autoincrement())
  type         String
  text         String   @db.Text
  createdAt    DateTime @default(now())
  aiResponseId Int

  aiResponse AIResponse @relation(fields: [aiResponseId], references: [id], onDelete: Cascade)
}

model Prompt {
  id        Int            @id @default(autoincrement())
  text      String
  createdAt DateTime       @default(now())
  options   PromptOption[]
}

model PromptOption {
  id         Int     @id @default(autoincrement())
  optionId   String
  optionName String
  isSelected Boolean @default(false)
  prompt     Prompt  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId   Int

  @@unique([promptId, optionId])
}
