// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   Int      @id @default(autoincrement())
  userId               String   @unique
  email                String   @unique
  hashPassword         String
  createdAt            DateTime @default(now())
  isTutorial           Boolean  @default(false)
  isCorrectionTutorial Boolean  @default(false)

  workspaces Workspace[]
}

model Workspace {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastUsedAt DateTime @default(now())
  isDeleted  Boolean  @default(false)

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  history WorkspaceHistory[]
}

enum MessageStatus {
  PENDING
  COMPLETED
  ERROR
  CANCELLED
}

model WorkspaceHistory {
  id          String        @id @default(uuid()) @db.Uuid
  historyName String?
  workspaceId String        @db.Uuid
  userRequest String        @db.Text
  status      MessageStatus @default(COMPLETED)
  createdAt   DateTime      @default(now())
  withPro     Boolean       @default(false)

  aiResponse      AIResponse?
  historyFavorite HistoryFavorite?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model HistoryFavorite {
  id                 Int      @id @default(autoincrement())
  workspaceHistoryId String   @unique @db.Uuid
  createdAt          DateTime @default(now())

  workspaceHistory WorkspaceHistory @relation(fields: [workspaceHistoryId], references: [id], onDelete: Cascade)
}

model AIResponse {
  id                 Int      @id @default(autoincrement())
  text               String   @db.Text
  createdAt          DateTime @default(now())
  workspaceHistoryId String   @unique @db.Uuid

  workspaceHistory WorkspaceHistory @relation(fields: [workspaceHistoryId], references: [id], onDelete: Cascade)
}
